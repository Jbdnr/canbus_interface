#!/usr/bin/env python
from __future__ import print_function
import rospy
from std_msgs.msg import Float32
from std_msgs.msg import Float64
from ackermann_msgs.msg import AckermannDriveStamped
import can_interface as ci
import os.path

# IDENTYFIATORY PUBLIKOWANYCH RAMEK
SPEED_PUB_ID = 0x1A  # TBD
STEERING_PUB_ID = 0x1B  # TBD

# IDENTYFIATORY SUBSKRYBOWANYCH RAMEK
DRIVE_MOTOR_STATUS_ID = 0x14D
STEERING_MOTOR_STATUS_ID = 0x34D

ackermann_angle = 0.0
ackermann_speed = 0.0


def ackermann_callback(msg):
    global ackermann_angle
    ackermann_angle = msg.drive.steering_angle
    global ackermann_speed
    ackermann_speed = msg.drive.speed


def main():
    rospy.init_node('can_node', anonymous=True)
    rospy.Subscriber('drive', AckermannDriveStamped, ackermann_callback)
    ros_speed_pub = rospy.Publisher('speed', Float64, queue_size=10)
    ros_distance_pub = rospy.Publisher('distance', Float64, queue_size=10)
    ros_angle_pub = rospy.Publisher('steering_angle', Float64, queue_size=10)

    angle_lookup_table = rospy.get_param(
        '~angle_lookup_table',
        os.path.join(os.path.abspath(os.path.dirname(__file__)), "../data/angle_data.csv"))
    speed_lookup_table = rospy.get_param(
        '~speed_lookup_table',
        os.path.join(os.path.abspath(os.path.dirname(__file__)), "../data/speed_data.csv"))

    bustype = rospy.get_param('~can_bustype', 'socketcan')
    channel = rospy.get_param('~can_channel', 'slcan0')  # vcan0 or slcan0
    bitrate = rospy.get_param('~can_bitrate', 250000)

    rospy.loginfo('\n angle_lookup_table: ' + angle_lookup_table)
    rospy.loginfo('\n speed_lookup_table: ' + speed_lookup_table)
    rospy.loginfo('bustype: ' + bustype)
    rospy.loginfo('channel: ' + channel)
    rospy.loginfo('bitrate: %i', bitrate)

    angle_conv = ci.Converter(angle_lookup_table, 'angle_ref_in_rad', 'angle_measured_norm')
    speed_conv = ci.Converter(speed_lookup_table, 'speed_ref_in_mps', 'speed_measured_norm')

    can_sub = ci.CanSubscriber(
                                DRIVE_MOTOR_STATUS_ID,
                                STEERING_MOTOR_STATUS_ID,
                                bustype,
                                channel,
                                bitrate)
    can_sub.can_subscriber()
    can_speed_pub = ci.CanPublisher(
                                    SPEED_PUB_ID,
                                    bustype,
                                    channel,
                                    bitrate)
    can_angle_pub = ci.CanPublisher(
                                    STEERING_PUB_ID,
                                    bustype,
                                    channel,
                                    bitrate)

    rate = rospy.Rate(10)  # 10hz
    while not rospy.is_shutdown():

        ros_speed_pub.publish(speed_conv.norm2real(can_sub.drive_motor_speed))
        ros_distance_pub.publish(can_sub.drive_motor_position)
        ros_angle_pub.publish(angle_conv.norm2real(can_sub.steering_motor_position))
        can_speed_pub.can_publisher(speed_conv.real2norm(ackermann_speed))
        can_angle_pub.can_publisher(angle_conv.real2norm(ackermann_angle))

        rate.sleep()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
    ci.CanSubscriber.stop_event.set()
